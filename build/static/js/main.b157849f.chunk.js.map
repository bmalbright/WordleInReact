{"version":3,"sources":["App.js","index.js"],"names":["App","useState","solution","setSolution","useEffect","fetch","then","res","json","randomSolution","Math","floor","random","length","word","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKA2BeA,MAtBf,WACE,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAYA,OAVAC,qBAAU,WACRC,MAAM,mCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAEJ,IAAMC,EAAiBD,EAAKE,KAAKC,MAAMD,KAAKE,SAASJ,EAAKK,SAC1DV,EAAYM,EAAeK,WAE9B,CAACX,IAGF,sBAAKY,UAAU,MAAf,UACE,uDACCb,GAAY,gDAAmBA,SCftCc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b157849f.chunk.js","sourcesContent":["import React from \"react\";\nimport {useState, useEffect} from 'react';\n// import './App.css';\n\n\nfunction App() {\n  const [solution, setSolution] = useState(null)\n  \n  useEffect(() => {\n    fetch('http://localhost:3001/solutions')\n      .then(res => res.json())\n      .then(json => {\n        // random int between 0 & 14\n        const randomSolution = json[Math.floor(Math.random()*json.length)]\n        setSolution(randomSolution.word)\n      })\n  }, [setSolution])\n\n  return (\n    <div className=\"App\">\n      <h1>Wordle Clone in React</h1>\n      {solution && <div>Solution is: {solution}</div>}\n    </div>\n  )\n}\n\n\nexport default App;\n\n\n\n// data to track\n//   --solution\n//     --five letter String\n//   --past guesses\n//     --array of past guesses\n//     --each past guess is an array of letter objects [{}], [{}], [{}], [{}], [{}]\n//     --each object represents a letter in the guess word {letter 'e', color: 'green'}\n//   --current guess\n//     --string 'cheat'\n//   --keypad letters\n//     --array of letter objects [{key: 'o', color: 'green'}], {key: 'p', color: 'green'}, {etc}, {}, {}\n//   --number of turns\n//     --an integer 0-6\n\n//   --game process:\n//     --entering words\n//         --user enters a letter & a square is filled with that letter\n//         --when a user hits delete it deletes the previous letter\n//         --when a user hits enter, it submits the word\n//             --if all the squares are not filled with letters, then the word is not submitted\n//             --if that word has already been used in a previous guess, then the word is not submitted\n//     --checking submitted words:\n//         --each letter is checked to see if it matches to the solution\n//         --each letter is assigned a color based on it's inclusion in the solution\n//             --exact matches (correct position in the solution) are green\n//             --partial matches (in the solution but not the correct position) are yellow\n//             --none-matches (not in the solution at all) are grey\n//         --the guess is added the grid with the correct colors\n//         --the current guess moves to the next row\n//         --the keypad letters are updated (colors)\n//     --ending the game:\n//         --when the guessed word fully matches the solution\n//             --modal to say 'well done'\n//     --when the user runs out of guesses\n//         --modal to say 'unlucky'\n\n// solution data options:\n//  1. third party API \n//  2. own database (like MongoDB)\n//  3. JSON file","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}